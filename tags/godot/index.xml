<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>godot on Arcane Energy</title><link>https://arcaneenergy.github.io/tags/godot/</link><description>Recent content in godot on Arcane Energy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 27 May 2022 09:44:17 +0200</lastBuildDate><atom:link href="https://arcaneenergy.github.io/tags/godot/index.xml" rel="self" type="application/rss+xml"/><item><title>Open Source Tilemap Level Editor released</title><link>https://arcaneenergy.github.io/posts/005/</link><pubDate>Fri, 27 May 2022 09:44:17 +0200</pubDate><guid>https://arcaneenergy.github.io/posts/005/</guid><description>Tilemap Level Editor Open source simple level editor for Godot with JSON export functionality. Made with Godot.
Github Project Download Download the exported program on itch.io.
itch.io download link
Video Use case This is currently used in a personal project. It&amp;rsquo;s used to load in JSON files into Godot to recreate the levels at runtime. The exported JSON file contains all levels and individual cells. This makes it easy to recreate the level in Godot.</description><content>&lt;h1 id="tilemap-level-editor">Tilemap Level Editor&lt;/h1>
&lt;p>Open source simple level editor for Godot with JSON export functionality. Made with Godot.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/arcaneenergy/tilemap-level-editor">Github Project&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="download">Download&lt;/h2>
&lt;p>Download the exported program on itch.io.&lt;/p>
&lt;p>&lt;a href="https://arcaneenergy.itch.io/tilemap-level-editor">&lt;strong>itch.io download link&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="video">Video&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/01ktb-9E6J0">&lt;img src="https://img.youtube.com/vi/01ktb-9E6J0/maxresdefault.jpg" width="50%">&lt;/a>&lt;/p>
&lt;h2 id="use-case">Use case&lt;/h2>
&lt;p>This is currently used in a personal project. It&amp;rsquo;s used to load in JSON files into Godot to recreate the levels at runtime. The exported JSON file contains all levels and individual cells. This makes it easy to recreate the level in Godot.&lt;/p>
&lt;p>Alternatively, you can use this program to easily create levels in the editor.&lt;/p>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;p>Placement:&lt;/p>
&lt;pre tabindex="0">&lt;code>- Left click: Place tile (if selected)
- Right click: Delete tile
&lt;/code>&lt;/pre>&lt;p>Other:&lt;/p>
&lt;pre tabindex="0">&lt;code>- TAB: Toggle GUI
- SHIFT + Scroll up: Increase brush size
- SHIFT + Scroll down: Decrease brush size
&lt;/code>&lt;/pre>&lt;p>Camera:&lt;/p>
&lt;pre tabindex="0">&lt;code>- Middle mouse drag: Drag camera around
- W / ↑: Move camera up
- S / ↓: Move camera down
- A / ←: Move camera left
- D / →: Move camera right
- Mouse scroll up: Zoom in
- Mouse scroll down: Zoom out
&lt;/code>&lt;/pre>&lt;h2 id="ui-overview">UI Overview&lt;/h2>
&lt;p>Create new layers with the &lt;code>+ New Layer&lt;/code> button. This brings up a dialog box for selecting an image file. After selecting a file, the new layer appears in the list.&lt;/p>
&lt;p>Switch between layers by pressing the arrow to the left of the layer. This will open the tileset on the left. Use the up and down arrow keys to move layers.&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/posts/005_1.png"
class="left expandable"
/>
&lt;p>Select a tile and start drawing.&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/posts/005_2.png"
class="left expandable"
/>
&lt;p>Change the size and shape of the cursor using the buttons in the lower right corner.&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/posts/005_3.png"
class="left expandable"
/>
&lt;h2 id="exported-json-file">Exported JSON file&lt;/h2>
&lt;p>The exported JSON file looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;texture_path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tilemap-level-editor/tileset.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cells&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">-6&lt;/span>,&lt;span style="color:#ae81ff">-1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">-5&lt;/span>,&lt;span style="color:#ae81ff">-1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;texture_path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;tilemap-level-editor/tileset.png&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cells&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">-7&lt;/span>,&lt;span style="color:#ae81ff">-2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">-6&lt;/span>,&lt;span style="color:#ae81ff">-2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each cell contains an ID, an x and a y position. The ID is used to identify which cell in the tileset it refers to.&lt;/p>
&lt;h2 id="problems">Problems&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Currently the program only supports tiles of 16x16 size. The spritesheet needs to be divisible by 16 (16, 32, 48, 64, 80, 96, 112, 128, etc.)&lt;/li>
&lt;/ul>
&lt;p>Godot_v3.5-rc2&lt;/p></content></item><item><title>VoxelGI Scene</title><link>https://arcaneenergy.github.io/posts/004/</link><pubDate>Sat, 19 Mar 2022 19:02:16 +0100</pubDate><guid>https://arcaneenergy.github.io/posts/004/</guid><description>Godot v4.0.alpha4.official</description><content>&lt;div class="embed video-player">
&lt;iframe width="100%" height="405" src="https://www.youtube.com/embed/a75-1YT1JaA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div>
&lt;p>
&lt;img
src="https://arcaneenergy.github.io/posts/004_1.jpg"
class="left expandable"
/>
&lt;img
src="https://arcaneenergy.github.io/posts/004_2.jpg"
class="left expandable"
/>
&lt;img
src="https://arcaneenergy.github.io/posts/004_3.jpg"
class="left expandable"
/>
&lt;img
src="https://arcaneenergy.github.io/posts/004_4.jpg"
class="left expandable"
/>
&lt;img
src="https://arcaneenergy.github.io/posts/004_5.jpg"
class="left expandable"
/>
&lt;/p>
&lt;p>Godot v4.0.alpha4.official&lt;/p></content></item><item><title>Image downloading from web with Godot</title><link>https://arcaneenergy.github.io/posts/003/</link><pubDate>Wed, 16 Mar 2022 12:45:22 +0100</pubDate><guid>https://arcaneenergy.github.io/posts/003/</guid><description>Overview This is a simple example of how Godot can be used as a web scraper. This tutorial is divided into two parts. Part one focuses on how to make HTTP requests. Part two shows how the image is displayed in Godot.
Part 1: Making HTTP-Requests Godot has a node called HTTPRequest. From the description: A node with the ability to send HTTP(S) requests.
You can either add this node to the scene tree or we can create this node with code.</description><content>&lt;div class="embed video-player">
&lt;iframe width="100%" height="405" src="https://www.youtube.com/embed/49CAuQLysyI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This is a simple example of how Godot can be used as a web scraper. This tutorial is divided into two parts. Part one focuses on how to make HTTP requests. Part two shows how the image is displayed in Godot.&lt;/p>
&lt;h2 id="part-1-making-http-requests">Part 1: Making HTTP-Requests&lt;/h2>
&lt;p>Godot has a node called &lt;a href="https://docs.godotengine.org/en/latest/classes/class_httprequest.html">&lt;code>HTTPRequest&lt;/code>&lt;/a>. From the description: &lt;code>A node with the ability to send HTTP(S) requests.&lt;/code>&lt;/p>
&lt;p>You can either add this node to the scene tree or we can create this node with code. In this example, we create it with code.&lt;/p>
&lt;h3 id="creating-the-httprequest-node">Creating the HTTPRequest node&lt;/h3>
&lt;div class="collapsable-code">
&lt;input id="579423681" type="checkbox" />
&lt;label for="579423681">
&lt;span class="collapsable-code__language">gdscript&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="▲" data-label-collapse="▼">&lt;/span>
&lt;/label>
&lt;pre class="language-python" >&lt;code>
func _ready() -&amp;gt; void:
var http_request := HTTPRequest.new()
add_child(http_request)
# Connect &amp;#34;request_completed&amp;#34; signal of HTTPRequest node.
http_request.connect(&amp;#34;request_completed&amp;#34;, _on_http_request_request_completed)
func _on_http_request_request_completed(result: int, response_code: int, headers: PackedStringArray, body: PackedByteArray) -&amp;gt; void:
pass
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="requesting-an-image">Requesting an image&lt;/h3>
&lt;p>Now all we have to do is request an image from a website.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="496352817" type="checkbox" />
&lt;label for="496352817">
&lt;span class="collapsable-code__language">gdscript&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="▲" data-label-collapse="▼">&lt;/span>
&lt;/label>
&lt;pre class="language-python" >&lt;code>
var error = http_request.request(&amp;#34;https://api.lorem.space/image/house&amp;#34;)
if error != OK:
printerr(&amp;#34;An error occurred.&amp;#34;)
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>If the request is unsuccessful, the error message is displayed.&lt;/p>
&lt;h2 id="part-2-displaying-the-image-in-godot">Part 2: Displaying the image in Godot&lt;/h2>
&lt;p>Add the following code to the &lt;code>_on_http_request_request_completed&lt;/code> function:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="269573814" type="checkbox" />
&lt;label for="269573814">
&lt;span class="collapsable-code__language">gdscript&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="▲" data-label-collapse="▼">&lt;/span>
&lt;/label>
&lt;pre class="language-python" >&lt;code>
if result != HTTPRequest.RESULT_SUCCESS:
push_error(&amp;#34;Image could not be downloaded.&amp;#34;)
var img := Image.new()
var error = img.load_jpg_from_buffer(body)
if error != OK:
push_error(&amp;#34;Could not load the image.&amp;#34;)
var tex = ImageTexture.new()
tex.create_from_image(img)
var sprite := Sprite3D.new()
add_child(sprite)
sprite.texture = tex
sprite.position = Vector3(0, 0, -5)
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>The image is then loaded with the data response of the request (&lt;code>body&lt;/code>). Depending on the image type requested, you may want to change &lt;code>load_jpg_from_buffer&lt;/code> to other image formats. You can change the &lt;code>jpg&lt;/code> in &lt;a href="https://docs.godotengine.org/en/latest/classes/class_image.html?highlight=image#class-image-method-load-jpg-from-buffer">&lt;code>load_jpg_from_buffer&lt;/code>&lt;/a> to &lt;code>bmp&lt;/code>, &lt;code>png&lt;/code>, &lt;code>tga&lt;/code> or &lt;code>webp&lt;/code>.&lt;/p>
&lt;p>If the request is successful, the sprite with the requested image should appear in your scene:&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/posts/003_result.png"
class="left expandable"
/>
&lt;p>Godot v4.0.alpha4.official&lt;/p></content></item></channel></rss>