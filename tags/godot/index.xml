<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>godot on Arcane Energy</title><link>https://arcaneenergy.github.io/tags/godot/</link><description>Recent content in godot on Arcane Energy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://arcaneenergy.github.io/tags/godot/index.xml" rel="self" type="application/rss+xml"/><item><title>Squash and Stretch Shader</title><link>https://arcaneenergy.github.io/assets/squash_stretch_shader/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/assets/squash_stretch_shader/</guid><description>An extremely simple implementation of a squash and stretch shader in Godot. Tested in Godot 4.0 Alpha 11.
Note: You may need a high-poly model.
shader_type spatial; uniform vec2 direction = vec2(1.0); uniform float squash: hint_range(0.0, 2.0) = 1.0; uniform float offset: hint_range(-0.5, 0.5) = 0.0; void vertex() { float v = abs(VERTEX.y + offset) * squash + direction.x; VERTEX *= vec3(v, direction.y, v); } Find the shader on Godot Shaders.</description><content>&lt;p>An extremely simple implementation of a squash and stretch shader in Godot. Tested in Godot 4.0 Alpha 11.&lt;/p>
&lt;p>&lt;strong>Note: You may need a high-poly model.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-glsl" data-lang="glsl">shader_type spatial;
&lt;span style="color:#66d9ef">uniform&lt;/span> &lt;span style="color:#66d9ef">vec2&lt;/span> direction &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">vec2&lt;/span>(&lt;span style="color:#ae81ff">1.0&lt;/span>);
&lt;span style="color:#66d9ef">uniform&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> squash&lt;span style="color:#f92672">:&lt;/span> hint_range(&lt;span style="color:#ae81ff">0.0&lt;/span>, &lt;span style="color:#ae81ff">2.0&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>;
&lt;span style="color:#66d9ef">uniform&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> offset&lt;span style="color:#f92672">:&lt;/span> hint_range(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0.5&lt;/span>, &lt;span style="color:#ae81ff">0.5&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>;
&lt;span style="color:#66d9ef">void&lt;/span> vertex() {
&lt;span style="color:#66d9ef">float&lt;/span> v &lt;span style="color:#f92672">=&lt;/span> abs(VERTEX.y &lt;span style="color:#f92672">+&lt;/span> offset) &lt;span style="color:#f92672">*&lt;/span> squash &lt;span style="color:#f92672">+&lt;/span> direction.x;
VERTEX &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#66d9ef">vec3&lt;/span>(v, direction.y, v);
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/O0og6WrAWk0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>Find the shader on &lt;a href="https://godotshaders.com/shader/squash-and-stretch/">Godot Shaders&lt;/a>.&lt;/p></content></item><item><title>Tilemap Level Editor</title><link>https://arcaneenergy.github.io/software/tilemap_level_editor/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/software/tilemap_level_editor/</guid><description>Simple level editor for Godot with JSON export functionality. Made with Godot.
Trailer Description Use case This is currently used in a personal project. It&amp;rsquo;s used to load in JSON files into Godot to recreate the levels at runtime. The exported JSON file contains all levels and individual cells. This makes it easy to recreate the level in Godot.</description><content>&lt;blockquote>
&lt;p>Simple level editor for Godot with JSON export functionality. Made with Godot.&lt;/p>
&lt;/blockquote>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;a href="https://github.com/arcaneenergy/tilemap-level-editor">
&lt;img src="https://arcaneenergy.github.io/icons/github_badge.svg">
&lt;/a>
&lt;/div>
&lt;div class="col-xs-6">
&lt;a href="https://arcaneenergy.itch.io/tilemap-level-editor">
&lt;img src="https://arcaneenergy.github.io/icons/itch_io_badge.svg">
&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="itchio-widget">
&lt;iframe src="https://itch.io/embed/1277666?bg_color=202020&amp;amp;fg_color=ffffff&amp;amp;link_color=fa5c5c&amp;amp;border_color=333d68"
width="552" height="167" frameborder="0">&lt;/iframe>
&lt;/div>
&lt;h2 id="trailer">Trailer&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/01ktb-9E6J0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="description">Description&lt;/h2>
&lt;h2 id="use-case">Use case&lt;/h2>
&lt;p>This is currently used in a personal project. It&amp;rsquo;s used to load in JSON files into Godot to recreate the levels at
runtime. The exported JSON file contains all levels and individual cells. This makes it easy to recreate the level in
Godot.&lt;/p>
&lt;p>Alternatively, you can use this program to easily create levels in the editor.&lt;/p>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;p>Placement:&lt;/p>
&lt;ul>
&lt;li>Left click: Place tile (if selected)&lt;/li>
&lt;li>Right click: Delete tile&lt;/li>
&lt;/ul>
&lt;p>Other:&lt;/p>
&lt;ul>
&lt;li>TAB: Toggle GUI&lt;/li>
&lt;li>SHIFT + Scroll up: Increase brush size&lt;/li>
&lt;li>SHIFT + Scroll down: Decrease brush size&lt;/li>
&lt;/ul>
&lt;p>Camera:&lt;/p>
&lt;ul>
&lt;li>Middle mouse drag: Drag camera around&lt;/li>
&lt;li>W / ↑: Move camera up&lt;/li>
&lt;li>S / ↓: Move camera down&lt;/li>
&lt;li>A / ←: Move camera left&lt;/li>
&lt;li>D / →: Move camera right&lt;/li>
&lt;li>Mouse scroll up: Zoom in&lt;/li>
&lt;li>Mouse scroll down: Zoom out&lt;/li>
&lt;/ul>
&lt;h2 id="ui-overview">UI Overview&lt;/h2>
&lt;p>Create new layers with the &lt;code>+ New Layer&lt;/code> button. This brings up a dialog box for selecting an image file. After
selecting a file, the new layer appears in the list.&lt;/p>
&lt;p>Switch between layers by pressing the arrow to the left of the layer. This will open the tileset on the left. Use the up
and down arrow keys to move layers.&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/software/tilemap_level_editor/image_01.png"
class="left expandable"
/>
&lt;p>Select a tile and start drawing.&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/software/tilemap_level_editor/image_02.png"
class="left expandable"
/>
&lt;p>Change the size and shape of the cursor using the buttons in the lower right corner.&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/software/tilemap_level_editor/image_03.png"
class="left expandable"
/>
&lt;h2 id="exported-json-file">Exported JSON file&lt;/h2>
&lt;p>The exported JSON file might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;layers&amp;#34;&lt;/span>: [
{
&lt;span style="color:#f92672">&amp;#34;texture_path&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;C:/tilemap-level-editor/test/tileset.png&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;cells&amp;#34;&lt;/span>: [
[
&lt;span style="color:#ae81ff">4&lt;/span>,
&lt;span style="color:#ae81ff">-5&lt;/span>,
&lt;span style="color:#ae81ff">-3&lt;/span>
]
]
}
],
&lt;span style="color:#f92672">&amp;#34;objects&amp;#34;&lt;/span>: [
{
&lt;span style="color:#f92672">&amp;#34;key&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;player&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;position&amp;#34;&lt;/span>: [
&lt;span style="color:#ae81ff">2&lt;/span>,
&lt;span style="color:#ae81ff">4&lt;/span>
]
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each cell contains an ID, an x and a y position. The ID is used to identify which cell in the tileset it refers to.&lt;/p>
&lt;h2 id="problems">Problems&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Currently, the program only supports tiles of 16x16 size. The spritesheet needs to be divisible by 16 (16, 32, 48,
64 etc.)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Exported texture paths are absolute.&lt;/li>
&lt;/ul>
&lt;p>Godot_v3.5-rc2&lt;/p></content></item><item><title>Walking Simulator</title><link>https://arcaneenergy.github.io/posts/walking_simulator/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/walking_simulator/</guid><description> YouTube Playlist</description><content>&lt;div class="row">
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_01.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_02.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_03.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_04.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_05.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_06.jpg"
class="left expandable"
/>
&lt;/div>
&lt;/div>
&lt;br/>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/FXGbLSfMP8c" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/6EP0E4-m7DU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/x3yRIS53hBw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/zXZNGsL-n2w" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="youtube-playlist">YouTube Playlist&lt;/h2>
&lt;div class="video-container">
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/videoseries?list=PLKnVIoBRwyaPWKeVhr9lFhboPVqALaxJk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div></content></item><item><title>Animated Explosions Pack #1</title><link>https://arcaneenergy.github.io/assets/animated_explosion_pack_1/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/assets/animated_explosion_pack_1/</guid><description> Add smooth looking explosions to your game!
A collection of explosions to add to your game! Create frame by frame explosions with these animations.
Included spritesheets, individual frames for each spritesheets and a sample Godot project! The Godot project is made with version 3.4.4.
Information Frames:
128x128 .png format Spritesheets:
25 FPS Spritesheet data 8x8 (64 Frames) 8x5 (40 Frames) 6x4 (24 Frames) 10x5 (50 Frames) 22x10 (220 Frames) 10x5 (50 Frames) 10x5 (50 Frames) 10x10 (100 Frames) 10x5 (50 Frames)</description><content>&lt;blockquote>
&lt;p>Add smooth looking explosions to your game!&lt;/p>
&lt;/blockquote>
&lt;div class="itchio-widget">
&lt;iframe src="https://itch.io/embed/1481896?bg_color=202020&amp;amp;fg_color=ffffff&amp;amp;link_color=fa5c5c&amp;amp;border_color=333d68"
width="552" height="167" frameborder="0">&lt;/iframe>
&lt;/div>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/assets/animated_explosion_pack_1/image_01.png"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/assets/animated_explosion_pack_1/image_02.png"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/assets/animated_explosion_pack_1/image_03.png"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/assets/animated_explosion_pack_1/image_04.png"
class="left expandable"
/>
&lt;/div>
&lt;/div>
&lt;p>A collection of explosions to add to your game! Create frame by frame explosions with these animations.&lt;/p>
&lt;p>Included spritesheets, individual frames for each spritesheets and a sample Godot project!
The Godot project is made with version 3.4.4.&lt;/p>
&lt;h2 id="information">Information&lt;/h2>
&lt;p>Frames:&lt;/p>
&lt;ul>
&lt;li>128x128&lt;/li>
&lt;li>.png format&lt;/li>
&lt;/ul>
&lt;p>Spritesheets:&lt;/p>
&lt;ul>
&lt;li>25 FPS&lt;/li>
&lt;/ul>
&lt;h2 id="spritesheet-data">Spritesheet data&lt;/h2>
&lt;ol>
&lt;li>8x8 (64 Frames)&lt;/li>
&lt;li>8x5 (40 Frames)&lt;/li>
&lt;li>6x4 (24 Frames)&lt;/li>
&lt;li>10x5 (50 Frames)&lt;/li>
&lt;li>22x10 (220 Frames)&lt;/li>
&lt;li>10x5 (50 Frames)&lt;/li>
&lt;li>10x5 (50 Frames)&lt;/li>
&lt;li>10x10 (100 Frames)&lt;/li>
&lt;li>10x5 (50 Frames)&lt;/li>
&lt;/ol></content></item><item><title>VoxelGI Scene</title><link>https://arcaneenergy.github.io/posts/voxelgi_scene/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/voxelgi_scene/</guid><description>Godot v4.0.alpha4.official</description><content>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/a75-1YT1JaA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;br/>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_01.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_02.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_03.jpg"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_04.jpg"
class="left expandable"
/>
&lt;/div>
&lt;/div>
&lt;p>Godot v4.0.alpha4.official&lt;/p></content></item><item><title>Download images from web with Godot</title><link>https://arcaneenergy.github.io/posts/download_images_from_web_with_godot/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/download_images_from_web_with_godot/</guid><description>Overview This is a simple example of how Godot can be used as a web scraper. This tutorial is divided into two parts. Part one focuses on how to make HTTP requests. Part two shows how the image is displayed in Godot.
Part 1: Making HTTP-Requests Godot provides a node to make HTTP-Requests: The HTTPRequest node. From the description: A node with the ability to send HTTP(S) requests.</description><content>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/49CAuQLysyI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This is a simple example of how Godot can be used as a web scraper. This tutorial is divided into two parts. Part one
focuses on how to make HTTP requests. Part two shows how the image is displayed in Godot.&lt;/p>
&lt;h2 id="part-1-making-http-requests">Part 1: Making HTTP-Requests&lt;/h2>
&lt;p>Godot provides a node to make HTTP-Requests:
The &lt;a href="https://docs.godotengine.org/en/latest/classes/class_httprequest.html">HTTPRequest&lt;/a> node. From the
description: A node with the ability to send HTTP(S) requests.&lt;/p>
&lt;p>You can either add this node to the scene tree or we can create this node with code. In this example, we create it with
code.&lt;/p>
&lt;h3 id="creating-the-httprequest-node">Creating the HTTPRequest node&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-gdscript" data-lang="gdscript">&lt;span style="color:#66d9ef">func&lt;/span> _ready() &lt;span style="color:#f92672">-&amp;gt;&lt;/span> void:
&lt;span style="color:#66d9ef">var&lt;/span> http_request :&lt;span style="color:#f92672">=&lt;/span> HTTPRequest&lt;span style="color:#f92672">.&lt;/span>new()
add_child(http_request)
&lt;span style="color:#75715e"># Connect &amp;#34;request_completed&amp;#34; signal of HTTPRequest node.&lt;/span>
http_request&lt;span style="color:#f92672">.&lt;/span>connect(&lt;span style="color:#e6db74">&amp;#34;request_completed&amp;#34;&lt;/span>, _on_http_request_request_completed)
&lt;span style="color:#66d9ef">func&lt;/span> _on_http_request_request_completed(result: &lt;span style="color:#a6e22e">int&lt;/span>, response_code: &lt;span style="color:#a6e22e">int&lt;/span>, headers: PackedStringArray, body:
PackedByteArray) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> void:
&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="requesting-an-image">Requesting an image&lt;/h3>
&lt;p>Now all we have to do is request an image from a website.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-gdscript" data-lang="gdscript">&lt;span style="color:#66d9ef">var&lt;/span> error &lt;span style="color:#f92672">=&lt;/span> http_request&lt;span style="color:#f92672">.&lt;/span>request(&lt;span style="color:#e6db74">&amp;#34;https://api.lorem.space/image/house&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> error &lt;span style="color:#f92672">!=&lt;/span> OK:
printerr(&lt;span style="color:#e6db74">&amp;#34;An error occurred.&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the request is unsuccessful, the error message is displayed.&lt;/p>
&lt;h2 id="part-2-displaying-the-image-in-godot">Part 2: Displaying the image in Godot&lt;/h2>
&lt;p>Add the following code to the &lt;code>_on_http_request_request_completed&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-gdscript" data-lang="gdscript">&lt;span style="color:#66d9ef">if&lt;/span> result &lt;span style="color:#f92672">!=&lt;/span> HTTPRequest&lt;span style="color:#f92672">.&lt;/span>RESULT_SUCCESS:
push_error(&lt;span style="color:#e6db74">&amp;#34;Image could not be downloaded.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> img :&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Image&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new()
&lt;span style="color:#66d9ef">var&lt;/span> error &lt;span style="color:#f92672">=&lt;/span> img&lt;span style="color:#f92672">.&lt;/span>load_jpg_from_buffer(body)
&lt;span style="color:#66d9ef">if&lt;/span> error &lt;span style="color:#f92672">!=&lt;/span> OK:
push_error(&lt;span style="color:#e6db74">&amp;#34;Could not load the image.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> tex &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ImageTexture&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new()
tex&lt;span style="color:#f92672">.&lt;/span>create_from_image(img)
&lt;span style="color:#66d9ef">var&lt;/span> sprite :&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Sprite3D&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new()
add_child(sprite)
sprite&lt;span style="color:#f92672">.&lt;/span>texture &lt;span style="color:#f92672">=&lt;/span> tex
sprite&lt;span style="color:#f92672">.&lt;/span>position &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Vector3&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The image is then loaded with the data response of the request (&lt;code>body&lt;/code>). Depending on the image type requested, you may
want to change &lt;code>load_jpg_from_buffer&lt;/code> to other image formats. You can change the &lt;code>jpg&lt;/code>
in &lt;a href="https://docs.godotengine.org/en/latest/classes/class_image.html?highlight=image#class-image-method-load-jpg-from-buffer">&lt;code>load_jpg_from_buffer&lt;/code>&lt;/a>
to &lt;code>bmp&lt;/code>, &lt;code>png&lt;/code>, &lt;code>tga&lt;/code> or &lt;code>webp&lt;/code>.&lt;/p>
&lt;p>If the request is successful, the sprite with the requested image should appear in your scene:&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/posts/download_images_from_web_with_godot/banner.png"
class="left expandable"
/>
&lt;p>Godot v4.0.alpha4.official&lt;/p></content></item><item><title>Top Down Shooter Tutorial Series</title><link>https://arcaneenergy.github.io/posts/top_down_shooter_tutorial_series/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/top_down_shooter_tutorial_series/</guid><description>Description This tutorial series focuses on different parts of game development.
You will learn:
How to use a singleton. Creating custom inputs and user-defined signals. How to create a Player who can move, turn and attack. How to create enemies that can move, turn and attack a target. Common attack and health system. Create a simple user interface GUI Skinning (Themes) Connecting the interface with game code. Create a simple main menu.</description><content>&lt;h2 id="description">Description&lt;/h2>
&lt;p>This tutorial series focuses on different parts of game development.&lt;/p>
&lt;p>You will learn:&lt;/p>
&lt;ul>
&lt;li>How to use a singleton.&lt;/li>
&lt;li>Creating custom inputs and user-defined signals.&lt;/li>
&lt;li>How to create a Player who can move, turn and attack.&lt;/li>
&lt;li>How to create enemies that can move, turn and attack a target.&lt;/li>
&lt;li>Common attack and health system.&lt;/li>
&lt;li>Create a simple user interface&lt;/li>
&lt;li>GUI Skinning (Themes)&lt;/li>
&lt;li>Connecting the interface with game code.&lt;/li>
&lt;li>Create a simple main menu.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="tutorial-1-creating-the-player">Tutorial #1: Creating the Player&lt;/h2>
&lt;p>Tutorial 1/5&lt;/p>
&lt;p>This tutorial will focus on creating a basic game structure and player character. The player character can be controlled
with keys and rotated with the mouse.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/wdKOtA5-Imk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-2-adding-enemies-and-shooting">Tutorial #2: Adding Enemies and Shooting&lt;/h2>
&lt;p>Tutorial 2/5&lt;/p>
&lt;p>In this tutorial, we are going to create a simple enemy that can move. We will also implement a simple but dynamic
shooting system that can be shared by different scripts.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/bjP71cQJrVE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-3-collision-layersmasks-and-health-system">Tutorial #3: Collision Layers/Masks and Health System&lt;/h2>
&lt;p>Tutorial 3/5&lt;/p>
&lt;p>Collision layers and collision masks can be confusing at first. In this tutorial, both of them will be used to make the
bullets collide with specific layers. We will also implement a dynamic health system.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/Z6i58mfcK3A" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-4-health-kits-bullet-hits">Tutorial #4: Health Kits, Bullet Hits&lt;/h2>
&lt;p>Tutorial 4/5&lt;/p>
&lt;p>We&amp;rsquo;re going to be adding health kits to the game now. We will also get the bullets to do something now.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/Yk00STxcon4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-5-gui-and-theming">Tutorial #5: GUI and Theming&lt;/h2>
&lt;p>Tutorial 5/5&lt;/p>
&lt;p>A simple, but functional GUI will be created in this tutorial.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/v-N_auLEQ2w" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="youtube-playlist">YouTube Playlist&lt;/h2>
&lt;div class="video-container">
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/videoseries?list=PLKnVIoBRwyaPJ-U6jPAePrwvOHhWZ6vxo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div></content></item><item><title>Whiteboard</title><link>https://arcaneenergy.github.io/software/whiteboard/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/software/whiteboard/</guid><description>Open Whiteboard Your private whiteboard.
Trailer Screenshots Description Whiteboard made with Godot.
Features:
🔹 Write text. Select different fonts and font styles.
🔹 Insert pictures. Change the scaling mode.
🔹 Insert shapes.
🔹 Draw with different variants of brushes.
🔹 Change the background theme.
🔹 Edit the grid size, background color and more.</description><content>&lt;button class="index-whiteboard-btn" onclick="window.location.href='https://arcaneenergy.github.io/whiteboard';">
&lt;img src="https://arcaneenergy.github.io/software/whiteboard/icon.png" alt="">
&lt;h2>Open Whiteboard&lt;/h2>
&lt;/button>
&lt;blockquote>
&lt;p>Your private whiteboard.&lt;/p>
&lt;/blockquote>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;a href="https://play.google.com/store/apps/details?id=com.arcaneenergy.whiteboard">
&lt;img src="https://arcaneenergy.github.io/icons/google_play_badge.svg">
&lt;/a>
&lt;/div>
&lt;div class="col-xs-6">
&lt;a href="https://arcaneenergy.itch.io/whiteboard">
&lt;img src="https://arcaneenergy.github.io/icons/itch_io_badge.svg">
&lt;/a>
&lt;/div>
&lt;/div>
&lt;div class="itchio-widget">
&lt;iframe src="https://itch.io/embed/1277666?bg_color=202020&amp;amp;fg_color=ffffff&amp;amp;link_color=fa5c5c&amp;amp;border_color=333d68"
width="552" height="167" frameborder="0">&lt;/iframe>
&lt;/div>
&lt;h2 id="trailer">Trailer&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/ay3ymU5kMr8" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="screenshots">Screenshots&lt;/h2>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/software/whiteboard/image_01.png"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/software/whiteboard/image_02.png"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/software/whiteboard/image_03.png"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/software/whiteboard/image_04.png"
class="left expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/software/whiteboard/image_05.png"
class="left expandable"
/>
&lt;/div>
&lt;/div>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>Whiteboard made with Godot.&lt;/p>
&lt;p>Features:&lt;/p>
&lt;p>🔹 Write text. Select different fonts and font styles.&lt;/p>
&lt;p>🔹 Insert pictures. Change the scaling mode.&lt;/p>
&lt;p>🔹 Insert shapes.&lt;/p>
&lt;p>🔹 Draw with different variants of brushes.&lt;/p>
&lt;p>🔹 Change the background theme.&lt;/p>
&lt;p>🔹 Edit the grid size, background color and more.&lt;/p>
&lt;p>🔹 Presentation system.&lt;/p>
&lt;hr>
&lt;p>A simple whiteboard for writing text, inserting pictures and drawing. Each tool has different settings and properties.
An integrated presentation system is available. Place focus points on your whiteboard and play them back like a slide
show.&lt;/p>
&lt;p>Your whiteboards are private. There is no server.&lt;/p>
&lt;h2 id="youtube-playlist">YouTube Playlist&lt;/h2>
&lt;div class="video-container">
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/videoseries?list=PLKnVIoBRwyaO3n4L06BIfuS26e3ultvxf" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div></content></item><item><title>Vignette Shader</title><link>https://arcaneenergy.github.io/assets/vignette_shader/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/assets/vignette_shader/</guid><description>The color and size of the vignette effect is adjustable.
shader_type canvas_item; uniform vec4 color: hint_color; uniform float multiplier = 0.2; uniform float softness = 3.0; void fragment() { float value = distance(UV, vec2(0.5)); COLOR = vec4(color.rgb, smoothstep(multiplier, softness, value)); }</description><content>&lt;p>The color and size of the vignette effect is adjustable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-glsl" data-lang="glsl">shader_type canvas_item;
&lt;span style="color:#66d9ef">uniform&lt;/span> &lt;span style="color:#66d9ef">vec4&lt;/span> color&lt;span style="color:#f92672">:&lt;/span> hint_color;
&lt;span style="color:#66d9ef">uniform&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> multiplier &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.2&lt;/span>;
&lt;span style="color:#66d9ef">uniform&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> softness &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span>;
&lt;span style="color:#66d9ef">void&lt;/span> fragment() {
&lt;span style="color:#66d9ef">float&lt;/span> value &lt;span style="color:#f92672">=&lt;/span> distance(UV, &lt;span style="color:#66d9ef">vec2&lt;/span>(&lt;span style="color:#ae81ff">0.5&lt;/span>));
COLOR &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">vec4&lt;/span>(color.rgb, smoothstep(multiplier, softness, value));
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/IGtQwsNDVLM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr></content></item></channel></rss>