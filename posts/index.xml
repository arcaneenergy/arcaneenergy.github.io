<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Arcane Energy</title><link>https://arcaneenergy.github.io/posts/</link><description>Recent content in Posts on Arcane Energy</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://arcaneenergy.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Walking Simulator</title><link>https://arcaneenergy.github.io/posts/walking_simulator/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/walking_simulator/</guid><description> YouTube Playlist</description><content>&lt;div class="row">
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_01.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_02.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_03.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_04.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_05.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/walking_simulator/image_06.jpg"
class="image expandable"
/>
&lt;/div>
&lt;/div>
&lt;br/>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/FXGbLSfMP8c" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/6EP0E4-m7DU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/x3yRIS53hBw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;div class="col-xs-6">
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/zXZNGsL-n2w" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="youtube-playlist">YouTube Playlist&lt;/h2>
&lt;div class="video-container">
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/videoseries?list=PLKnVIoBRwyaPWKeVhr9lFhboPVqALaxJk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div></content></item><item><title>VoxelGI Scene</title><link>https://arcaneenergy.github.io/posts/voxelgi_scene/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/voxelgi_scene/</guid><description>Godot v4.0.alpha4.official</description><content>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/a75-1YT1JaA" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;br/>
&lt;div class="row">
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_01.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_02.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_03.jpg"
class="image expandable"
/>
&lt;/div>
&lt;div class="col-xs-6">
&lt;img
src="https://arcaneenergy.github.io/posts/voxelgi_scene/image_04.jpg"
class="image expandable"
/>
&lt;/div>
&lt;/div>
&lt;p>Godot v4.0.alpha4.official&lt;/p></content></item><item><title>Download images from web with Godot</title><link>https://arcaneenergy.github.io/posts/download_images_from_web_with_godot/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/download_images_from_web_with_godot/</guid><description>Overview This is a simple example of how Godot can be used as a web scraper. This tutorial is divided into two parts. Part one focuses on how to make HTTP requests. Part two shows how the image is displayed in Godot.
Part 1: Making HTTP-Requests Godot provides a node to make HTTP-Requests: The HTTPRequest node. From the description: A node with the ability to send HTTP(S) requests.</description><content>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/49CAuQLysyI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This is a simple example of how Godot can be used as a web scraper. This tutorial is divided into two parts. Part one
focuses on how to make HTTP requests. Part two shows how the image is displayed in Godot.&lt;/p>
&lt;h2 id="part-1-making-http-requests">Part 1: Making HTTP-Requests&lt;/h2>
&lt;p>Godot provides a node to make HTTP-Requests:
The &lt;a href="https://docs.godotengine.org/en/latest/classes/class_httprequest.html">HTTPRequest&lt;/a> node. From the
description: A node with the ability to send HTTP(S) requests.&lt;/p>
&lt;p>You can either add this node to the scene tree or we can create this node with code. In this example, we create it with
code.&lt;/p>
&lt;h3 id="creating-the-httprequest-node">Creating the HTTPRequest node&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-gdscript" data-lang="gdscript">&lt;span style="color:#66d9ef">func&lt;/span> _ready() &lt;span style="color:#f92672">-&amp;gt;&lt;/span> void:
&lt;span style="color:#66d9ef">var&lt;/span> http_request :&lt;span style="color:#f92672">=&lt;/span> HTTPRequest&lt;span style="color:#f92672">.&lt;/span>new()
add_child(http_request)
&lt;span style="color:#75715e"># Connect &amp;#34;request_completed&amp;#34; signal of HTTPRequest node.&lt;/span>
http_request&lt;span style="color:#f92672">.&lt;/span>connect(&lt;span style="color:#e6db74">&amp;#34;request_completed&amp;#34;&lt;/span>, _on_http_request_request_completed)
&lt;span style="color:#66d9ef">func&lt;/span> _on_http_request_request_completed(result: &lt;span style="color:#a6e22e">int&lt;/span>, response_code: &lt;span style="color:#a6e22e">int&lt;/span>, headers: PackedStringArray, body:
PackedByteArray) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> void:
&lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="requesting-an-image">Requesting an image&lt;/h3>
&lt;p>Now all we have to do is request an image from a website.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-gdscript" data-lang="gdscript">&lt;span style="color:#66d9ef">var&lt;/span> error &lt;span style="color:#f92672">=&lt;/span> http_request&lt;span style="color:#f92672">.&lt;/span>request(&lt;span style="color:#e6db74">&amp;#34;https://api.lorem.space/image/house&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> error &lt;span style="color:#f92672">!=&lt;/span> OK:
printerr(&lt;span style="color:#e6db74">&amp;#34;An error occurred.&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the request is unsuccessful, the error message is displayed.&lt;/p>
&lt;h2 id="part-2-displaying-the-image-in-godot">Part 2: Displaying the image in Godot&lt;/h2>
&lt;p>Add the following code to the &lt;code>_on_http_request_request_completed&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-gdscript" data-lang="gdscript">&lt;span style="color:#66d9ef">if&lt;/span> result &lt;span style="color:#f92672">!=&lt;/span> HTTPRequest&lt;span style="color:#f92672">.&lt;/span>RESULT_SUCCESS:
push_error(&lt;span style="color:#e6db74">&amp;#34;Image could not be downloaded.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> img :&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Image&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new()
&lt;span style="color:#66d9ef">var&lt;/span> error &lt;span style="color:#f92672">=&lt;/span> img&lt;span style="color:#f92672">.&lt;/span>load_jpg_from_buffer(body)
&lt;span style="color:#66d9ef">if&lt;/span> error &lt;span style="color:#f92672">!=&lt;/span> OK:
push_error(&lt;span style="color:#e6db74">&amp;#34;Could not load the image.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">var&lt;/span> tex &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ImageTexture&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new()
tex&lt;span style="color:#f92672">.&lt;/span>create_from_image(img)
&lt;span style="color:#66d9ef">var&lt;/span> sprite :&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Sprite3D&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new()
add_child(sprite)
sprite&lt;span style="color:#f92672">.&lt;/span>texture &lt;span style="color:#f92672">=&lt;/span> tex
sprite&lt;span style="color:#f92672">.&lt;/span>position &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Vector3&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The image is then loaded with the data response of the request (&lt;code>body&lt;/code>). Depending on the image type requested, you may
want to change &lt;code>load_jpg_from_buffer&lt;/code> to other image formats. You can change the &lt;code>jpg&lt;/code>
in &lt;a href="https://docs.godotengine.org/en/latest/classes/class_image.html?highlight=image#class-image-method-load-jpg-from-buffer">&lt;code>load_jpg_from_buffer&lt;/code>&lt;/a>
to &lt;code>bmp&lt;/code>, &lt;code>png&lt;/code>, &lt;code>tga&lt;/code> or &lt;code>webp&lt;/code>.&lt;/p>
&lt;p>If the request is successful, the sprite with the requested image should appear in your scene:&lt;/p>
&lt;img
src="https://arcaneenergy.github.io/posts/download_images_from_web_with_godot/banner.png"
class="image expandable"
/>
&lt;p>Godot v4.0.alpha4.official&lt;/p></content></item><item><title>Top Down Shooter Tutorial Series</title><link>https://arcaneenergy.github.io/posts/top_down_shooter_tutorial_series/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://arcaneenergy.github.io/posts/top_down_shooter_tutorial_series/</guid><description>Description This tutorial series focuses on different parts of game development.
You will learn:
How to use a singleton. Creating custom inputs and user-defined signals. How to create a Player who can move, turn and attack. How to create enemies that can move, turn and attack a target. Common attack and health system. Create a simple user interface GUI Skinning (Themes) Connecting the interface with game code. Create a simple main menu.</description><content>&lt;h2 id="description">Description&lt;/h2>
&lt;p>This tutorial series focuses on different parts of game development.&lt;/p>
&lt;p>You will learn:&lt;/p>
&lt;ul>
&lt;li>How to use a singleton.&lt;/li>
&lt;li>Creating custom inputs and user-defined signals.&lt;/li>
&lt;li>How to create a Player who can move, turn and attack.&lt;/li>
&lt;li>How to create enemies that can move, turn and attack a target.&lt;/li>
&lt;li>Common attack and health system.&lt;/li>
&lt;li>Create a simple user interface&lt;/li>
&lt;li>GUI Skinning (Themes)&lt;/li>
&lt;li>Connecting the interface with game code.&lt;/li>
&lt;li>Create a simple main menu.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="tutorial-1-creating-the-player">Tutorial #1: Creating the Player&lt;/h2>
&lt;p>Tutorial 1/5&lt;/p>
&lt;p>This tutorial will focus on creating a basic game structure and player character. The player character can be controlled
with keys and rotated with the mouse.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/wdKOtA5-Imk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-2-adding-enemies-and-shooting">Tutorial #2: Adding Enemies and Shooting&lt;/h2>
&lt;p>Tutorial 2/5&lt;/p>
&lt;p>In this tutorial, we are going to create a simple enemy that can move. We will also implement a simple but dynamic
shooting system that can be shared by different scripts.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/bjP71cQJrVE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-3-collision-layersmasks-and-health-system">Tutorial #3: Collision Layers/Masks and Health System&lt;/h2>
&lt;p>Tutorial 3/5&lt;/p>
&lt;p>Collision layers and collision masks can be confusing at first. In this tutorial, both of them will be used to make the
bullets collide with specific layers. We will also implement a dynamic health system.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/Z6i58mfcK3A" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-4-health-kits-bullet-hits">Tutorial #4: Health Kits, Bullet Hits&lt;/h2>
&lt;p>Tutorial 4/5&lt;/p>
&lt;p>We&amp;rsquo;re going to be adding health kits to the game now. We will also get the bullets to do something now.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/Yk00STxcon4" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="tutorial-5-gui-and-theming">Tutorial #5: GUI and Theming&lt;/h2>
&lt;p>Tutorial 5/5&lt;/p>
&lt;p>A simple, but functional GUI will be created in this tutorial.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/v-N_auLEQ2w" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;h2 id="youtube-playlist">YouTube Playlist&lt;/h2>
&lt;div class="video-container">
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/videoseries?list=PLKnVIoBRwyaPJ-U6jPAePrwvOHhWZ6vxo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>&lt;/iframe>
&lt;/div></content></item></channel></rss>